// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Modelo que armazena os dados dos tenants
model Tenant {
  id             String         @id
  name           String
  domain         String         @unique
  smtp           Json?
  smsDevKey      String?
  pushInPayToken String?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @default(now()) @updatedAt
  User           User[]
  Organization   Organization[]
  Resource       Resource[]
  Permission     Permission[]
  Solution       Solution[]
  Link           Link[]

  @@map("tenants")
}

// Modelo que armazena as permissões do sistema
model Permission {
  id             String           @unique
  tenantId       String
  tenant         Tenant           @relation(fields: [tenantId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  name           String?
  description    String?
  value          String
  restrict       Boolean? // Se a permissão for restrita, então ela só pode ser atribuída pelos pelos proprietários do sistema e não estará disponível para uso nas organizações
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @default(now()) @updatedAt
  RolePermission RolePermission[]
  KeyPermission  KeyPermission[]
  UserPermission UserPermission[]

  @@id([tenantId, value])
  @@map("permissions")
}

// # GESTÃO DOS SERVIÇOS DO TENANT

enum ESolutionType {
  LINKS // Serviços de links
  FUNNELS // Serviço de funis
}

model Solution {
  id          String        @unique
  tenantId    String
  tenant      Tenant        @relation(fields: [tenantId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  type        ESolutionType
  name        String
  description String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @default(now()) @updatedAt
  Offer       Offer[]

  @@id([tenantId, type])
  @@map("solutions")
}

enum EOfferRecurrence {
  MONTHLY // A cada 1 mês
  QUARTERLY // A cada 3 meses
  SEMMONLY // A cada 6 meses
  YEARLY // A cada 12 meses
}

enum EOfferStatus {
  ACTIVE // Funcional e disponível à qualquer um
  PRIVATE // Restrito à grupos específicos (Exige configuração manual)
  DISABLED // Desativado (Não disponível à ninguém)
}

model Offer {
  id           String            @id
  solutionId   String
  solution     Solution          @relation(fields: [solutionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  status       EOfferStatus      @default(DISABLED)
  name         String
  description  String?
  amount       Int?
  recurrence   EOfferRecurrence?
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @default(now()) @updatedAt
  Benefit      Benefit[]
  Subscription Subscription[]
  Charge       Charge[]

  @@map("offers")
}

model Resource {
  id          String    @unique
  tenantId    String
  tenant      Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  name        String
  description String?
  key         String // Chave local do recurso do sistema
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now()) @updatedAt
  Benefit     Benefit[]

  @@id([tenantId, key])
  @@map("resources")
}

model Benefit {
  offerId    String
  offer      Offer    @relation(fields: [offerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  resourceId String
  resource   Resource @relation(fields: [resourceId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  value      Int?

  @@id([offerId, resourceId])
  @@map("benefits")
}

// # USUÁRIOS

enum EUserStatus {
  ACTIVE
  BLOCKED
  SUSPENDED
}

// Modelo que armazena os usuários
model User {
  id                    String           @id
  tenantId              String
  tenant                Tenant           @relation(fields: [tenantId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  status                EUserStatus      @default(ACTIVE)
  lockReason            String?
  firstName             String
  lastName              String?
  email                 String
  emailUpdate           String?
  emailVerifiedAt       DateTime?
  phoneNumber           String
  phoneNumberUpdate     String?
  phoneNumberVerifiedAt DateTime?
  password              String
  createdAt             DateTime         @default(now())
  updatedAt             DateTime         @default(now()) @updatedAt
  Member                Member[]
  Confirmation          Verification[]
  UserPermission        UserPermission[]

  @@map("users")
}

enum EVerificationContext {
  CONFIRM // Confirmar um valor (email, telefone, etc)
  RECOVERY // Recuperar conta
}

enum EVerificationMethod {
  EMAIL
  PHONE
}

model Verification {
  id        String               @id
  userId    String?
  user      User?                @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  code      String               @unique
  context   EVerificationContext
  method    EVerificationMethod
  expireAt  DateTime? // Data em que o código de verificação irá expirar
  createdAt DateTime             @default(now())
  updatedAt DateTime             @default(now()) @updatedAt

  @@map("verifications")
}

// (pivot) Modelo que relaciona usuários diretamente às permissões (Para acesso administrativo)
model UserPermission {
  userId       String
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  permissionId String
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([userId, permissionId])
  @@map("userPermission")
}

// # ORGANIZAÇÕES, AGRUPAMENTOS E CONTROLE DE ACESSO

// Modelo que armazena as organizações
model Organization {
  id           String         @id
  tenantId     String
  tenant       Tenant         @relation(fields: [tenantId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  name         String
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @default(now()) @updatedAt
  Member       Member[]
  Subscription Subscription[]
  Charge       Charge[]
  Key          Key[]
  Role         Role[]
  Funnel       Funnel[]
  Link         Link[]

  @@map("organizations")
}

// Modelo que armazena as chaves de API das organizações
model Key {
  id             String          @id
  organizationId String
  organization   Organization    @relation(fields: [organizationId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  value          String          @unique // Chave de API
  disabled       Boolean?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @default(now()) @updatedAt
  KeyPermission  KeyPermission[]

  @@map("keys")
}

// pivot
model KeyPermission {
  keyId        String
  key          Key        @relation(fields: [keyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  permissionId String
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([keyId, permissionId])
  @@map("keyPermission")
}

enum EMemberStatus {
  ACTIVE // Membro ativo
  INVITED // Convite enviado
  DISABLED // Membro desativado
}

// Modelo que relaciona os usuário como participantes de organizações
model Member {
  id             String        @id
  userId         String?
  user           User?         @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  organizationId String
  organization   Organization  @relation(fields: [organizationId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  status         EMemberStatus @default(INVITED)
  owner          Boolean?
  inviteEmail    String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @default(now()) @updatedAt
  MemberRole     MemberRole[]

  @@map("members")
}

// pivot
model MemberRole {
  memberId String
  member   Member @relation(fields: [memberId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  roleId   String
  role     Role   @relation(fields: [roleId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([memberId, roleId])
  @@map("memberRole")
}

model Subscription {
  id             String       @id
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  offerId        String
  offer          Offer        @relation(fields: [offerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  nextCharge     DateTime? // Data da próxima cobrança do valor da oferta
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @default(now()) @updatedAt

  @@map("subscriptions")
}

enum EChargeStatus {
  PAID
  PENDING
  CANCELED
}

model Charge {
  id             String        @id
  organizationId String
  organization   Organization  @relation(fields: [organizationId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  offerId        String
  offer          Offer         @relation(fields: [offerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  status         EChargeStatus @default(PENDING)
  amount         Int?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @default(now()) @updatedAt

  @@map("charges")
}

// Modelo que armazena as roles de organizações
model Role {
  id             String           @id
  organizationId String
  organization   Organization     @relation(fields: [organizationId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  name           String
  description    String?
  selfManaged    Boolean? // Determina se a role só pode ser alterada pelo sistema
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @default(now()) @updatedAt
  MemberRole     MemberRole[]
  RolePermission RolePermission[]

  @@map("roles")
}

// pivot
model RolePermission {
  roleId       String
  role         Role       @relation(fields: [roleId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  permissionId String
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([roleId, permissionId])
  @@map("rolePermission")
}

// # SERVIÇO DE LINKS

// Modelo que armazena os links para um determinado funil
model Link {
  id             String       @id
  tenantId       String
  tenant         Tenant       @relation(fields: [tenantId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  enabled        Boolean?
  name           String?
  customPath     String? // Link com "path" personalizado
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @default(now()) @updatedAt
  Tracker        Tracker[]
  Click          Click[]

  @@map("links")
}

enum EClickDevice {
  MOBILE
  DESKTOP
}

enum EClickOS {
  CHROMEOS
  WINDOWS
  LINUX
  MACOS
}

model Click {
  id        String        @id
  linkId    String
  link      Link          @relation(fields: [linkId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  ip        String?
  country   String?
  device    EClickDevice?
  os        EClickOS?
  allowed   Boolean?
  createdAt DateTime      @default(now())
  updatedAt DateTime      @default(now()) @updatedAt

  @@map("clicks")
}

// # SERVIÇO DE FUNIS

// Modelo da entidade fundamental do funil
model Funnel {
  id             String       @id
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  name           String
  description    String?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @default(now()) @updatedAt
  Lead           Lead[]
  Variable       Variable[]
  Step           Step[]
  Tracker        Tracker[]

  @@map("funnels")
}

enum ETrackerOrigin {
  META
  TIKTOK
  GTM
}

model Tracker {
  funnelId  String
  funnel    Funnel         @relation(fields: [funnelId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  linkId    String
  link      Link           @relation(fields: [linkId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  origin    ETrackerOrigin
  code      String
  createdAt DateTime       @default(now())
  updatedAt DateTime       @default(now()) @updatedAt

  @@id([funnelId, linkId])
  @@map("trackers")
}

// Modelo que armazena os "leads", pessoas que entraram no funil
model Lead {
  id          String        @id
  funnelId    String
  funnel      Funnel        @relation(fields: [funnelId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  name        String?
  email       String?
  phoneNumber String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @default(now()) @updatedAt
  Value       Value[]
  Interaction Interaction[]

  @@map("leads")
}

enum EVariableType {
  TEXT
  NUMBER
  BOOLEAN
  PHONE
  EMAIL
}

// Modelo que armazena as variáveis disponível no funil
model Variable {
  id        String        @id
  funnelId  String
  funnel    Funnel        @relation(fields: [funnelId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  type      EVariableType
  name      String
  regex     Json? // Configuração de regex customizada para validar o valor
  createdAt DateTime      @default(now())
  updatedAt DateTime      @default(now()) @updatedAt
  Value     Value[]

  @@map("variables")
}

// Modelo que armazena os valores das variáveis assim como à qual lead elas pertencem
model Value {
  id         String   @id
  leadId     String
  lead       Lead     @relation(fields: [leadId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  variableId String
  variable   Variable @relation(fields: [variableId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  value      String   @db.Text
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  @@map("values")
}

enum EStepType {
  START // Nó que inicializa o funil, ele é sempre o primeiro e só existe 1 por funil
  PAGE // Nó que renderiza uma página
  WEBHOOK // Nó que dispara um evento de webhook
  REDIRECT // Nó que faz um redirecionamento externo
  DISTRIBUTOR // Nó que divide o fluxo em vários caminhos possíveis. O caminho que será seguido pode ser determinado por sorteio, proporção, ou condicionais
  COMMUNITY // Nó para mandar a pessoa para uma comunidade (WhatsApp, Telegram, Discord, etc.)
}

// Modelo das etapas dentro de um funil
model Step {
  id          String        @id
  funnelId    String
  funnel      Funnel        @relation(fields: [funnelId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  type        EStepType
  name        String // Nome customizável da etapa
  config      Json? // Configuração efetiva da etapa (Varia de acordo com o tipo da etapa)
  statistics  Json? // Estatísticas da etapa
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @default(now()) @updatedAt
  EdgeOrigin  Edge[]        @relation("EdgeOrigin")
  EdgeDestiny Edge[]        @relation("EdgeDestiny")
  Interaction Interaction[]

  @@map("steps")
}

// Modelo que armazena as coneções entre as etapas
model Edge {
  id        String   @id
  originId  String
  origin    Step     @relation("EdgeOrigin", fields: [originId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  destinyId String
  destiny   Step     @relation("EdgeDestiny", fields: [destinyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@map("edges")
}

// Modelo que armazena as interações de um lead em uma determinada etapa
model Interaction {
  id        String   @id
  leadId    String
  lead      Lead     @relation(fields: [leadId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  stepId    String
  step      Step     @relation(fields: [stepId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@map("interactions")
}
